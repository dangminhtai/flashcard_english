from icrawler.builtin import GoogleImageCrawler
import cv2
from PIL import Image, ImageDraw, ImageFont
import os
import numpy as np
from nltk.corpus import wordnet
from googletrans import Translator
import eng_to_ipa as ipa
# üîπ H√†m l·∫•y lo·∫°i t·ª´ ch√≠nh
def get_word_type(word):
    synsets = wordnet.synsets(word)
    if not synsets:
        return "Unknown"  # Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i t·ª´
    pos = synsets[0].pos()  # L·∫•y lo·∫°i t·ª´ c·ªßa nghƒ©a ƒë·∫ßu ti√™n
    pos_map = {"n": "Danh t·ª´", "v": "ƒê·ªông t·ª´", "a": "T√≠nh t·ª´", "r": "Tr·∫°ng t·ª´"}
    return pos_map.get(pos, "Kh√°c")

# üîπ H√†m d·ªãch nghƒ©a sang ti·∫øng Vi·ªát + l·∫•y c√°ch ph√°t √¢m
def translate_word(word):
    translator = Translator()
    result = translator.translate(word, src="en", dest="vi")
    pronunciation = ipa.convert(word)  # L·∫•y phi√™n √¢m IPA
    return result.text, pronunciation

# üîπ Nh·∫≠p t·ª´ kh√≥a
save_dir = "flashcards"
keyword = input("Nh·∫≠p t·ª´ ti·∫øng Anh: ")
print("\033[33mNh·∫≠p nh·ªØng g√¨ b·∫°n bi·∫øt v·ªÅ t·ª´ n√†y ho·∫∑c b·∫•m Enter ƒë·ªÉ b·ªè qua\033[0m")
word_type= input("Nh·∫≠p lo·∫°i t·ª´ (t√≠nh, danh, ƒë·ªông, tr·∫°ng,...): ")
define_vn = input("Nh·∫≠p nghƒ©a ti·∫øng Vi·ªát m√† b·∫°n bi·∫øt: ")
subnet_dir =input("Nh·∫≠p th∆∞ m·ª•c ch·ªß ƒë·ªÅ b·∫°n mu·ªën t·∫°o: ")
if not word_type:
    word_type = get_word_type(keyword)  # X√°c ƒë·ªãnh lo·∫°i t·ª´

if not define_vn:
    define_vn, pronunciation = translate_word(keyword)  # D·ªãch + l·∫•y c√°ch ph√°t √¢m
else:
    _, pronunciation = translate_word(keyword)  # Ch·ªâ l·∫•y c√°ch ph√°t √¢m

print(f"üìå {keyword.capitalize()} /{pronunciation}/ ({word_type}): {define_vn}")

if subnet_dir:
    save_dir=save_dir+"//"+subnet_dir
filename = f"{keyword}.jpg"

# üîπ T·∫°o th∆∞ m·ª•c l∆∞u flashcards
os.makedirs(save_dir, exist_ok=True)

# üîπ T·∫£i ·∫£nh t·ª´ Google
crawler = GoogleImageCrawler(storage={"root_dir": save_dir})
crawler.crawl(keyword=keyword, max_num=1)

# üîπ X·ª≠ l√Ω ·∫£nh
file_list = os.listdir(save_dir)
if file_list:
    old_file = os.path.join(save_dir, file_list[0])
    new_file = os.path.join(save_dir, filename)

       # ƒê·ªçc ·∫£nh b·∫±ng OpenCV
    img_cv = cv2.imread(old_file)
    img_cv = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)  # Chuy·ªÉn sang RGB
    
    # Resize ·∫£nh v·ªÅ 128x128
    img_cv = cv2.resize(img_cv, (128, 128))

    # üîπ Chuy·ªÉn sang HSV ƒë·ªÉ ph√¢n t√≠ch m√†u
    img_hsv = cv2.cvtColor(img_cv, cv2.COLOR_RGB2HSV)

    # Chuy·ªÉn pixel sang ƒë·ªãnh d·∫°ng HSV
    pixels_hsv = img_hsv.reshape((-1, 3))
    pixels_hsv = np.float32(pixels_hsv)

    # √Åp d·ª•ng K-Means ƒë·ªÉ t√¨m m√†u ch·ªß ƒë·∫°o
    k = 3  # Ch·ªçn 3 m√†u ch√≠nh
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
    _, labels, palette = cv2.kmeans(pixels_hsv, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

    # Chuy·ªÉn sang RGB ƒë·ªÉ s·ª≠ d·ª•ng
    palette_rgb = [tuple(map(int, cv2.cvtColor(np.uint8([[c]]), cv2.COLOR_HSV2RGB)[0][0])) for c in palette]

    # üîπ Lo·∫°i b·ªè m√†u t·ªëi, x√°m, n√¢u
    valid_colors = []
    for i, (h, s, v) in enumerate(palette):
        if v > 60 and s > 50:  # Lo·∫°i m√†u t·ªëi & m√†u nh·∫°t
            if not (h < 20 and s < 100 and v < 150):  # Lo·∫°i m√†u n√¢u
                valid_colors.append((labels.flatten().tolist().count(i), palette_rgb[i]))

    # üîπ ∆Øu ti√™n m√†u 7 s·∫Øc c·∫ßu v·ªìng (Hue 0¬∞ - 300¬∞)
    rainbow_colors = []
    for count, color in valid_colors:
        h, s, v = cv2.cvtColor(np.uint8([[color]]), cv2.COLOR_RGB2HSV)[0][0]
        if 0 <= h <= 300:
            rainbow_colors.append((count, color))

    # Ch·ªçn m√†u xu·∫•t hi·ªán nhi·ªÅu nh·∫•t trong danh s√°ch h·ª£p l·ªá
    chosen_colors = rainbow_colors if rainbow_colors else valid_colors
    dominant_color = chosen_colors[0][1] if chosen_colors else (0, 0, 255)
        # Chuy·ªÉn ·∫£nh sang PIL ƒë·ªÉ v·∫Ω flashcard
    img_pil = Image.fromarray(img_cv)

    # üîπ T·∫°o flashcard v·ªõi vi·ªÅn m√†u ch·ªß ƒë·∫°o
    card_width, card_height = 200, 280
    flashcard = Image.new("RGB", (card_width, card_height), "white")

    draw = ImageDraw.Draw(flashcard)
    border_width = 4
    draw.rectangle(
        [(border_width, border_width), (card_width - border_width, card_height - border_width)], 
        outline=dominant_color, width=border_width
    )
    # D√°n ·∫£nh v√†o flashcard
    img_x = (card_width - 128) // 2
    img_y = 20
    flashcard.paste(img_pil, (img_x, img_y))

    # üîπ Th√™m ch·ªØ (T·ª´ + Phi√™n √¢m + Lo·∫°i t·ª´ + Nghƒ©a)
    font = ImageFont.truetype("arial.ttf", 20)
    font_type = ImageFont.truetype("arial.ttf", 16)
    font_vi = ImageFont.truetype("arial.ttf", 18)

    # T·ª´ ti·∫øng Anh
    text_x = (card_width - draw.textlength(keyword.capitalize(), font=font)) // 2
    draw.text((text_x, 160), keyword.capitalize(), fill=dominant_color, font=font)

    # Phi√™n √¢m
    text_x_pron = (card_width - draw.textlength(f"/{pronunciation}/", font=font_type)) // 2
    draw.text((text_x_pron, 185), f"/{pronunciation}/", fill="black", font=font_type)

    # Lo·∫°i t·ª´
    text_x_type = (card_width - draw.textlength(f"({word_type})", font=font_type)) // 2
    draw.text((text_x_type, 210), f"({word_type})", fill="gray", font=font_type)

    # Nghƒ©a ti·∫øng Vi·ªát
    text_x_vi = (card_width - draw.textlength(define_vn.capitalize(), font=font_vi)) // 2
    draw.text((text_x_vi, 240), define_vn.capitalize(), fill="black", font=font_vi)

    # üîπ L∆∞u flashcard
    flashcard.save(new_file)

    # X√≥a file ·∫£nh g·ªëc
    os.remove(old_file)

print(f"üé¥ Flashcard ƒë√£ ƒë∆∞·ª£c t·∫°o: {save_dir}/{filename}")
